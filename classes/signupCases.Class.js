module.exports = {
	getDefaultFields:function(data, socket, callback){
		var rn = require('random-number');
		var options = {
		  min:  1
		, max:  36
		, integer: true
		}

		var randID = rn(options);

		var pp = (data.ult === 'fb') ? 'https://graph.facebook.com/'+data.tId+'/picture?height=200&width=200' : '/images/user_avatar/avatar0'+randID+'.jpg';
		var ud = {
			ver:(typeof data.ver == 'undefined') ? 0 : data.ver, // version apk ios
			sno :(typeof data.sno == 'undefined') ? '' : data.sno,
			un :(typeof data.un == 'undefined') ? 'Guest_'+Math.floor(Math.random()*999999) : data.un,
			email :(typeof data.email == 'undefined') ? '' : data.email,
			tId :(typeof data.tId == 'undefined') ? '' : data.tId,//thirdpartyid
			gender :(typeof data.gender == 'undefined') ? '' : data.gender,
			det :(typeof data.det == 'undefined') ? '' : data.det, //device type = ios, IOS, android, ANDROID, dec
			ult :(typeof data.ult == 'undefined') ? '' : data.ult, //user login type = guest, fb, google
			uid:'',
			userID:'',
			is_robot : false,
			coins:config.NEWUSER_COINS,
			pp:pp, // profile picture
			socketId: socket.id,
			roomId:'',//current playing room
			status: 0,//status - busy or free
			rfc: commonClass.GetRandomString(7), // referral code generated by system on signup
			is_robot : false,
			result:{
				gp:0, //no of game played
				gw:0, //no of game win
			},
			lasts:{
				ll: new Date(), // last login time
				lbct: new Date(),// last bonus collected time
			},
			counters:{
				dbc:0, // daily bounus counter
				mbc:0, // magic box counter
				urmsg:0, // unread msg
				fr:0, // friend request
			},
			dids : (typeof data.dids == 'undefined') ? '' : data.dids,
			chips: config.NEWUSER_CHIPS,
			createdOn: new Date(),
			cwchips: 0,//current week chips
			lwchips: 0,//last week chips
			country: '',
			at:(typeof data.at == 'undefined') ? '' : data.at,
			osid:'', //onesignal id
			tnmtId : '',//tournament id
			pc_use : '',//promocode use
		};
		callback(ud);
	},
	GSP:function(data,socket){
		
		var en = data.en;
		
		if(typeof data.data == 'undefined'){
			commonClass.SendData({'Message' : 'Guestsignup request is not in data object','en':data.en, 'sc':0}, socket.id);
			return false;
		}
		var data=data.data;
		data['en']=en;

		if(typeof data.sno == 'undefined'){
			commonClass.SendData({ 'Message' : 'Guestsignup sno is not defined',en:data.en, 'sc':0}, socket.id);
			return false;

		}
		if(typeof data.det == 'undefined'){
			commonClass.SendData({ 'Message' : 'Guestsignup det is not defined',en:data.en, 'sc':0}, socket.id);
			return false;
		}
		if(typeof data.ult == 'undefined'){
			commonClass.SendData({ 'Message' : 'Guestsignup ult is not defined',en:data.en, 'sc':0}, socket.id);
			return false;
		}


        db.collection('game_users').findOne({sno : data.sno, ult:data.ult}, function (err, resp) {

			db.collection('game_tables').find({}).toArray(function(err, gameTableInfo){

			 	if(resp){
			 		var upWhere = {$set: {}};
			 		if(typeof data.un != 'undefined'){
			 			upWhere.$set.un = data.un;
			 		}
			 		if(typeof data.pp != 'undefined'){
		 				upWhere.$set.pp = data.pp;
		 			}
			 		if(typeof data.dids != 'undefined'){
			 			upWhere.$set.dids= data.dids;
			 		}
			 		upWhere.$set.det = data.det; // device type
			 		upWhere.$set.ver = data.ver; // version
			 		upWhere.$set.socketId = socket.id; // version
			 		upWhere.$set["lasts.ll"]=new Date();


			 		db.collection('game_users').updateOne({_id: resp._id},upWhere,function(err,res){

			 			var roomId = resp.roomId;
			 			var roomSeat = resp.roomSeat;
			 			var tnmtId = resp.tnmtId;

			 			if( roomId ){

							tablesManager.GetTableInfo(roomId, function(err,RoomInfo){

								if(RoomInfo){
									
									var ActivePlayers = playingCases.getActivePlayersCount(RoomInfo.players);
									if(RoomInfo.players[resp._id] && ActivePlayers > 1){
										
										commonClass.SendData({gameTableInfo:gameTableInfo, 'data':resp,IR:true,'en':data.en, 'sc':1}, socket.id);

									}else{

										var upWhere = {$set: {}};
										upWhere.$set.roomId = '';
										upWhere.$set.roomSeat = '';
										userSettingCases.userFindUpdate(upWhere, resp._id, function(err, resp1){
											printLog(err);
											printLog(resp);
											if(!err){

												commonClass.SendData({gameTableInfo:gameTableInfo, 'data':resp1.value,IR:false,'en':data.en, 'sc':1}, socket.id);
											}
										});
									}

								}else{
									
									commonClass.SendData({gameTableInfo:gameTableInfo, 'data':resp,IR:false,'en':data.en, 'sc':1}, socket.id);
								}

			 				});	
		 				}else{

							commonClass.SendData({gameTableInfo:gameTableInfo, 'data':resp,IR:false,'en':data.en, 'sc':1}, socket.id);
		 				}

			 		});

			 	}else{


		 			signupClass.getDefaultFields(data, socket, function(tData){

		 					var userData = tData;
		 					var ip2country = require('ip2country');
						    var country = ip2country(data.ip);
					 		userData.country=country;
							
							var uniqid = require('uniqid');
					 		userData.uid=uniqid.time()+'-'+uniqid.process() ;
					 		userData.userID='G00'+Math.floor(Math.random()*90000000 + 10000000) ;
					 		signupClass.RefLink(function(RefLink){


					 			userData.reflink = RefLink;
								db.collection('game_users').insertOne(userData,function(err,userData){
									friendsCases.insertFreind(userData.ops[0]._id);
									commonClass.SendData({gameTableInfo:gameTableInfo,'data':userData.ops[0], 'en':data.en, 'sc':1}, socket.id);
			 						notificationCases.FrindsOnline(userData.ops[0], socket, 1);
								});
					 		});


		 			});

			 	}
			});
		})
	},
	TPSP:function(data, socket){
		printLog("signup_class :: FBSignup >>");
		var en = data.en;

		if(typeof data.data == 'undefined'){
			commonClass.SendData({'Message':'FBSignup request is not in data object','en':data.en, 'sc':0}, socket.id);
			return false;
		}

		var data = data.data;
		data['en']=en;

		if(typeof data.det == 'undefined'){
			commonClass.SendData({'Message':' det is not define', 'en':data.en, 'sc':0}, socket.id);
			return false;
		}

		//we have to check type of registration.//dec for test with desktop
		if(data.det == 'ios' || data.det =='IOS' || data.det =='android' || data.det =='ANDROID' || data.det =='dec' ){
			

			signupClass.thirdpartyLoginOrSignup(data, socket, function(err, res){

		 		notificationCases.FrindsOnline(res, socket, 1);


				var roomId = res.roomId;
	 			var roomSeat = res.roomSeat;

				db.collection('game_tables').find({}).toArray(function(err, gameTableInfo){

		 			if( roomId ){

						tablesManager.GetTableInfo(roomId, function(err,RoomInfo){

							if(RoomInfo){
								
								var ActivePlayers = playingCases.getActivePlayersCount(RoomInfo.players);
								
								if(RoomInfo.igs == 1){

									commonClass.SendData({gameTableInfo:gameTableInfo,'data':res,IR:true,'en':data.en, 'sc':1}, socket.id);

								}else{

									var upWhere = {$set: {}};
									upWhere.$set.roomId = '';
									upWhere.$set.roomSeat = '';
									userSettingCases.userFindUpdate(upWhere, res._id, function(err, resp){
										
										commonClass.SendData({gameTableInfo:gameTableInfo, 'data':resp.value,IR:false,'en':data.en, 'sc':1}, socket.id);
									});
								}

							}else{
								
								var upWhere = {$set: {}};
								upWhere.$set.roomId = '';
								upWhere.$set.roomSeat = '';
								userSettingCases.userFindUpdate(upWhere, res._id, function(err, resp){
									
									commonClass.SendData({gameTableInfo:gameTableInfo, 'data':resp.value,IR:false,'en':data.en, 'sc':1}, socket.id);
								});

							}

						});

		 			}else{
						commonClass.SendData({gameTableInfo:gameTableInfo, 'data':res,IR:false,'en':data.en, 'sc':1}, socket.id);
		 			}

				});

			});
		}
	},
	thirdpartyLoginOrSignup:function(data, socket, callback){
		// printLog('sign :: thirdpartyLoginOrSignup');
		// if(typeof data.tId != 'undefined'){
		// 	var wh = {tId:data.tId};
		// }


		db.collection('game_users').findOne({tId:data.tId}, function(err,res){

			signupClass.getDefaultFields(data, socket, function(userData){
				if(!res){
					var fuserData = userData;
					fuserData.chips=config.NEWUSER_FBCHIPS;
					var ip2country = require('ip2country');
				    var country = ip2country(socket.request.connection.remoteAddress);
			 		fuserData.country=country;
				 	fuserData.userID='TP00'+Math.floor(Math.random()*90000000 + 10000000) ;

				 	signupClass.RefLink(function(RefLink){

				 		fuserData.reflink = RefLink;
				 		var uniqid = require('uniqid');
				 		userData.uid=data.tId;
				 		
				 		// userData.uid=uniqid.time()+'-'+uniqid.process() ;


						db.collection('game_users').insertOne(fuserData, function(err, resp){
							friendsCases.insertFreind(resp.ops[0]._id);
							
							callback(err, resp.ops[0])
						});
					});
				}else{


					if(res.socketId!= ''){
						commonClass.SendData({'msg':'You are logging in another device.','en':'logout', 'sc':1}, res.socketId);
					}
					// c("<<<<<Fb Login old user>>>>>");
						var upWhere = {$set:{}};

						upWhere.$set.det = userData.det;
						upWhere.$set.tId = userData.tId;
						upWhere.$set.at = userData.at;
						upWhere.$set.ult = userData.ult;
						upWhere.$set.un = userData.un;
						upWhere.$set.email = userData.email;
						upWhere.$set.socketId = socket.id;
						// upWhere.$set.speed = userData.speed;
						upWhere.$set.ver = userData.ver;
						upWhere.$set['lasts.ll'] = new Date();

						if(userData.dids != '' && userData.dids != null){
							upWhere.$set.dids = userData.dids;
						}

						if(userData.sno !='' && userData.sno != null){
							upWhere.$set.sno = userData.sno;
						}

						var ip2country = require('ip2country');
					    var country = ip2country(data.ip);
						upWhere.$set.country = country;

						var user_id = res._id;
							userSettingCases.userFindUpdate(upWhere, user_id, function(err, res){

							callback(err, res.value)
						});

				}
			});
		});
	},
	RefLink:function(callback){

		var BitlyAPI = require("node-bitlyapi");
		var uniqid = require('uniqid');

		var Bitly = new BitlyAPI({
		  client_id: "dddd7ea5ae3c1b82ee9609c234499b650741e664",
		  client_secret: "32f7a8ae548337ecc2a890985c0076b2dd72e9e6"  
		});


		Bitly.setAccessToken('3205d362c126626699fc28e6319a0b2c45db24eb');

		Bitly.shorten({longUrl: config.BASE_URL+':'+config.SERVER_PORT+'/'+uniqid()}, function(err, results) {
		    // Do something with your new, shorter url...

		    if(!err){
		    	
			    results = JSON.parse(results)

			    if( results.status_code == 200){
			    	callback(results.data.url)
			    }else{
			    	callback('');
			    }
		    }
		});
	},
}